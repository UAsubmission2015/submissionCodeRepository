<Author>
May 2015

Updates and Notes ************************************************************************************

  -  Paths are relative and generated by MATLAB. AVOID SPACES IN THE ENTIRE FILE PATH. 
  -  All data processing is designed for the specific signals output by the original SCADA plot page 'optimassFinal'. Any modifications may have a knock-effect in the 
	database management scripts like CreateMatlabDataBase, and in the post processing code like 'processData'. Original code for pre-processing inherited from Bart Verlaat.
  -  The script 'createTimeFilter3' is Beta: has been reliable so far, but lacks the extensive testing needed to ensure it is always outputting useful data. 
	If in doubt, revert to 'createTimeFilter2'.
  -  The function plotTests() is a single consolidated tool that takes in user-requested test conditions and processed data. It finds data meeting the requested conditions,
	plots demanded variables for this data and handles all labeling, legends etc. It also generates trendlines for easier reading of plots.
  -  CreateTimeFilter3 combines user-identified steady state timestamps with an algorithm evaluating signal noise to time-average several seconds of data at each point.
  -  All variables are identified by unique strings summarised in the script 'createSubSet'. String identifiers are as follows:
	varStrings={'Test','Flow','Temp','FT3020','EHDL1','EHDL2','PT7024','TT7024','PT7450','FT7524','DT7424','TT7424','PT7056','TT7056','absFlowError',
	'Relative Flow Error','expectedDensity','Vapour Quality','absDensityError','Relative Density Error','measuredVelocity','predictedVelocity',
	'sensorFlowVelocity','Optimass Vapour Quality','absVQerror','Relative Vapour Quality Error','Gas Velocity'};
	You must use these exact strings to call these variables in 'createSubSet' or 'plotTests'.
  -  Automatic plot sizing and exports. Use the toolbox 'figureExport', downloaded from https://github.com/altmany/export_fig , to automatically format and export the plots.
	More robust than 'save'.  The script generatePlots2 shows how this is implemented. Be aware - generatePlots2 will OVERWRITE plots every time it is run. 
  -  You will see many 'Directory already exists' warnings. This is not a run-time error. It arises because MATLAB is trying to make a new directory when saving processed 
	data, when the directory already exists from previously running the scripts.
  -  If after createTimeFilter3 or processData you see over an over the same value in your processed data vectors, it probably means that you are trying to call timestamps 
        that haven't been imported. Check your data range in 'GetDataFromDataBase', as well as whether the data is present in 'optimassMatlab/MatlabTestData'


Instructions for SCADA export ******************************************************************

Export scada page 'OptimassFinal'[trend tree] using jump to time. Do not scroll on trends to maintain timesteps in sync. 
Save the raw .csv file under TymMatlab2/ DO_NOT_EDIT_backup_OriginalScadasData.
File name: 'yyyy-mm-dd_scada'
Copy the file to 'optimassMatlab/CSVfiles'. 

Log steady-state timestamps in 'timestamps.xl'
Log tests and test numbers in 'testlog.xl'

Typical one test per afternoon so up to 2 exports per day. Append '2' after scada for second test.



For a demonstration ***************************************************************************
run 'DEMONSTRATION'


Fastest way to crunch data**********************************************************************
run GetDataFromDataBase
run 'autoProcess'
run generatePlots2, modifying the 'flows' and 'temps' vectors to the test conditions you desire to visualise.
	-or-
run importTestLog and then use the function plotTests() to plot the conditions you're interested in.



Details of key scripts and functions************************************************************
More in MATLAB comments.


CreateMatlabDataBase - Pre-processes the data from the directory 'optimassMatlab/CSVfiles', merging it into the database 'optimassMatlab/MatlabTestData'.
GetDataFromDataBase - Loads the database in 'optimassMatlab/MatlabTestData' into the MATLAB workspace.
autoProcess - Runs 'importTimeStamps', 'createTimeFilter3', and 'processData' to output clean, steady state data to the database in 'optimassMatlab/postProcessedData'.
	importTimestamps - imports the steady state timestamps from the excel file 'optimassMatlab/timestamps.xl'
	createTimeFilter3 - Evaluates noise levels at steady state time stamps to take samples of up to 30 seconds at nominal steady state conditions. 
				time-averages signals to eliminate sensor noise.
	processData - imports the clean data from createTimeFilter3 and calculates error signals and thermodynamic properties like reference vapour quality.
			Each processed signal is identified by a specific string, used to call it in functions like 'createSubSet'.
createSubSet- Returns two vectors - a subset of the clean, steadystate data produced by createTimeFilter3 that corresponds to user - requested variables and test conditions.

function: plotTests() - takes in user-requested test conditions, processed data and the 3 vectors generated by 'importTestLog' to automatically generate and label plots. 
			Requires input of demand signals - use unique strings defined in the script 'createSubSet'.
Script-generatePlots2 - calls plotTests for various conditions to generate some plots that were interesting with the first series of test data taken in April 2015.
			Export plots to the directory 'optimassMATLAB/plots'.
			